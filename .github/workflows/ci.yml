name: CI Workflow

on:
  push:
    branches:
      - main  # workflow срабатывает на пуш в ветку main

jobs:
  security_check:
    name: Security Check with Bandit
    runs-on: ubuntu-latest

    steps:
      - name: Check out the code
        uses: actions/checkout@v4  # Проверяем код из репозитория

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'  # Указываем нужную версию Python

      - name: Install Bandit
        run: |
          pip install bandit  # Устанавливаем Bandit для проверки безопасности

      - name: Run security check
        run: |
         bandit -r . -x ./venv -x ./.git --exclude ./venv/Lib/site-packages --skip B101,B110,B602,B603,B605,B607

      - name: Upload Bandit Report as Artifact
        uses: actions/upload-artifact@v4
        with:
          name: bandit-report  # Загрузка отчета Bandit как артефакт
          path: bandit_report.html  # Путь к отчету Bandit

  openapi_generation:
    name: Generate OpenAPI Documentation
    runs-on: ubuntu-latest
    needs: security_check  # Этот шаг зависит от завершения предыдущего шага

    steps:
      - name: Check out the code
        uses: actions/checkout@v4  # Проверяем код

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'  # Указываем нужную версию Python

      - name: Install Dependencies
        run: |
          pip install flask flasgger  # Устанавливаем Flask и Flasgger для работы с OpenAPI

      - name: Generate OpenAPI Specification (openapi.yaml)
        run: |
          curl http://127.0.0.1:5000/swagger.json -o openapi.yaml
        env:
          FLASK_APP: app.py  # Убедитесь, что указываете правильный файл Flask-приложения

      - name: Upload OpenAPI Spec as Artifact
        uses: actions/upload-artifact@v4
        with:
          name: openapi-spec  # Загрузка OpenAPI спецификации как артефакт
          path: openapi.yaml  # Путь к сгенерированному файлу openapi.yaml

  redoc_generation:
    name: Generate ReDoc Page
    runs-on: ubuntu-latest
    needs: openapi_generation  # Этот шаг зависит от завершения предыдущего шага

    steps:
      - name: Check out the code
        uses: actions/checkout@v4  # Проверяем код

      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'  # Устанавливаем Node.js для работы с redocly

      - name: Install redocly
        run: |
          npm install -g @redocly/openapi-cli  # Устанавливаем redocly

      - name: Generate ReDoc HTML
        run: |
          redocly build-docs openapi.yaml --output docs/index.html  # Генерируем страницу документации ReDoc

  deploy_to_pages:
    name: Deploy Documentation to GitHub Pages
    runs-on: ubuntu-latest
    needs: redoc_generation  # Этот шаг зависит от завершения предыдущего шага

    steps:
      - name: Check out the code
        uses: actions/checkout@v4  # Проверяем код

      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v4
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./docs  # Директория, куда загружается документация

