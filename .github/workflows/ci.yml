name: Deploy API Documentations

on:
  push:
    branches:
      - main  # Пайплайн запускается при push в ветку main

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      # Шаг 1: Checkout репозитория
      - name: Checkout repository
        uses: actions/checkout@v4

      # Шаг 2: Установка Python
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      # Шаг 3: Установка зависимостей Python
      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flask flasgger

      # Шаг 4: Установка Node.js
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      # Шаг 5: Установка Redocly CLI
      - name: Install Redocly CLI
        run: |
          npm install -g @redocly/cli

      # Шаг 6: Запуск Flask-приложения и генерация OpenAPI спецификации
      - name: Run Flask app and generate OpenAPI spec
        run: |
          # Запуск Flask приложения в фоновом режиме
          nohup python app.py &
          sleep 5  # Даем серверу время на старт

          # Извлекаем swagger.json из работающего Flask приложения
          curl http://127.0.0.1:5000/apidocs/swagger.json -o openapi.json
          
          # Конвертируем JSON в YAML
          npx js-yaml openapi.json > openapi.yaml

      # Шаг 7: Проверка спецификации OpenAPI
      - name: Validate OpenAPI spec
        run: |
          redocly lint openapi.yaml

      # Шаг 8: Генерация документации с использованием Redocly
      - name: Generate ReDoc documentation
        run: |
          redocly build-docs openapi.yaml --output ./docs/index.html

      # Шаг 9: Публикация документации на GitHub Pages
      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./docs  # Публикуем сгенерированную документацию на GitHub Pages








